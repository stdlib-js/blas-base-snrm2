{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/snrm2.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport FLOAT32_MAX from '@stdlib/constants-float32-max';\nimport f32 from '@stdlib/number-float64-base-to-float32';\nimport absf from '@stdlib/math-base-special-absf';\nimport abs2f from '@stdlib/math-base-special-abs2f';\nimport sqrtf from '@stdlib/math-base-special-sqrtf';\n\n\n// VARIABLES //\n\n// Blue's scaling constants:\nvar tsml = 1.08420217E-19;\nvar tbig = 4.50359963E+15;\nvar ssml = 3.77789319E+22;\nvar sbig = 1.32348898E-23;\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} L2-norm\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var z = snrm2( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snrm2( N, x, stride, offset ) {\n\tvar notbig;\n\tvar sumsq;\n\tvar abig;\n\tvar amed;\n\tvar asml;\n\tvar ymax;\n\tvar ymin;\n\tvar scl;\n\tvar ax;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offset;\n\n\t// Initialize loop values for accumulation:\n\tnotbig = true;\n\n\tsumsq = 0.0;\n\tabig = 0.0;\n\tamed = 0.0;\n\tasml = 0.0;\n\tscl = 1.0;\n\n\t// Compute the sum of squares using 3 accumulators--`abig` (sum of squares scaled down to avoid overflow), `asml` (sum of squares scaled up to avoid underflow), `amed` (sum of squares that do not require scaling)--and thresholds and multipliers--`tbig` (values bigger than this are scaled down by `sbig`) and `tsml` (values smaller than this are scaled up by `ssml`)...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tax = absf( x[ ix ] );\n\t\tif ( ax > tbig ) {\n\t\t\tabig = f32( abig + abs2f( ax * sbig ) );\n\t\t\tnotbig = false;\n\t\t} else if ( ax < tsml ) {\n\t\t\tif ( notbig ) {\n\t\t\t\tasml = f32( asml + abs2f( ax * ssml ) );\n\t\t\t}\n\t\t} else {\n\t\t\tamed = f32( amed + f32( ax * ax ) );\n\t\t}\n\t\tix += stride;\n\t}\n\t// Combine `abig` and `amed` or `amed` and `asml` if more than one accumulator was used...\n\tif ( abig > 0.0 ) {\n\t\t// Combine `abig` and `amed` if `abig` > 0...\n\t\tif ( amed > 0.0 || ( amed > FLOAT32_MAX ) || ( amed !== amed ) ) {\n\t\t\tabig = f32( abig + f32( f32( amed * sbig ) * sbig ) );\n\t\t}\n\t\tscl = f32( 1.0 / sbig );\n\t\tsumsq = abig;\n\t} else if ( asml > 0.0 ) {\n\t\t// Combine `amed` and `asml` if `asml` > 0...\n\t\tif ( amed > 0.0 || amed > FLOAT32_MAX || ( amed !== amed ) ) {\n\t\t\tamed = sqrtf( amed );\n\t\t\tasml = f32( sqrtf( asml ) / ssml );\n\t\t\tif ( asml > amed ) {\n\t\t\t\tymin = amed;\n\t\t\t\tymax = asml;\n\t\t\t} else {\n\t\t\t\tymin = asml;\n\t\t\t\tymax = amed;\n\t\t\t}\n\t\t\tscl = 1.0;\n\t\t\tsumsq = f32( f32( ymax * ymax ) * f32( 1.0 + abs2f( ymin / ymax ) ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tscl = f32( 1.0 / ssml );\n\t\t\tsumsq = asml;\n\t\t}\n\t} else {\n\t\t// All values are mid-range...\n\t\tscl = 1.0;\n\t\tsumsq = amed;\n\t}\n\treturn f32( sqrtf( sumsq ) * scl );\n}\n\n\n// EXPORTS //\n\nexport default snrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} L2-norm\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var z = snrm2( x.length, x, 1 );\n* // returns 3.0\n*/\nfunction snrm2( N, x, stride ) {\n\tvar ox = stride2offset( N, stride );\n\treturn ndarray( N, x, stride, ox );\n}\n\n\n// EXPORTS //\n\nexport default snrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport snrm2 from './snrm2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( snrm2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default snrm2;\n"],"names":["tsml","tbig","ssml","sbig","snrm2","N","x","stride","offset","notbig","sumsq","abig","amed","asml","ymax","ymin","scl","ax","ix","i","absf","f32","abs2f","FLOAT32_MAX","sqrtf","ndarray","stride2offset","setReadOnly"],"mappings":";;2sBAgCA,IAAIA,EAAO,cACPC,EAAO,YACPC,EAAO,aACPC,EAAO,cAsBX,SAASC,EAAOC,EAAGC,EAAGC,EAAQC,GAC7B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKd,GAAK,EACT,OAAO,EAcR,IAZAa,EAAKV,EAGLC,GAAS,EAETC,EAAQ,EACRC,EAAO,EACPC,EAAO,EACPC,EAAO,EACPG,EAAM,EAGAG,EAAI,EAAGA,EAAId,EAAGc,KACnBF,EAAKG,EAAMd,EAAGY,KACJjB,GACTU,EAAOU,EAAKV,EAAOW,EAAOL,EAAKd,IAC/BM,GAAS,GACEQ,EAAKjB,EACXS,IACJI,EAAOQ,EAAKR,EAAOS,EAAOL,EAAKf,KAGhCU,EAAOS,EAAKT,EAAOS,EAAKJ,EAAKA,IAE9BC,GAAMX,EAiCP,OA9BKI,EAAO,IAENC,EAAO,GAASA,EAAOW,GAAmBX,GAASA,KACvDD,EAAOU,EAAKV,EAAOU,EAAKA,EAAKT,EAAOT,GAASA,KAE9Ca,EAAMK,EAAK,EAAMlB,GACjBO,EAAQC,GACGE,EAAO,EAEbD,EAAO,GAAOA,EAAOW,GAAiBX,GAASA,GACnDA,EAAOY,EAAOZ,IACdC,EAAOQ,EAAKG,EAAOX,GAASX,IAChBU,GACXG,EAAOH,EACPE,EAAOD,IAEPE,EAAOF,EACPC,EAAOF,GAERI,EAAM,EACNN,EAAQW,EAAKA,EAAKP,EAAOA,GAASO,EAAK,EAAMC,EAAOP,EAAOD,OAE3DE,EAAMK,EAAK,EAAMnB,GACjBQ,EAAQG,IAITG,EAAM,EACNN,EAAQE,GAEFS,EAAKG,EAAOd,GAAUM,EAC9B,CCvFA,SAASZ,EAAOC,EAAGC,EAAGC,GAErB,OAAOkB,EAASpB,EAAGC,EAAGC,EADbmB,EAAerB,EAAGE,GAE5B,CClBAoB,EAAAvB,EAAA,UAAAqB"}