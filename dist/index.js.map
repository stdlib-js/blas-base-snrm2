{
  "version": 3,
  "sources": ["../lib/snrm2.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sqrtf = require( '@stdlib/math-base-special-sqrtf' );\nvar absf = require( '@stdlib/math-base-special-absf' );\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {PositiveInteger} stride - stride length\n* @returns {number} L2-norm\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var z = snrm2( x.length, x, 1 );\n* // returns 3.0\n*/\nfunction snrm2( N, x, stride ) {\n\tvar scale;\n\tvar ssq;\n\tvar ax;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 || stride <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 ) {\n\t\treturn absf( x[ 0 ] );\n\t}\n\tscale = 0.0;\n\tssq = 1.0;\n\tN *= stride;\n\tfor ( i = 0; i < N; i += stride ) {\n\t\tif ( x[ i ] !== 0.0 ) {\n\t\t\tax = absf( x[ i ] );\n\t\t\tif ( scale < ax ) {\n\t\t\t\tv = float64ToFloat32( scale/ax );\n\t\t\t\tssq = float64ToFloat32( 1.0 + float64ToFloat32( ssq * float64ToFloat32( v*v ) ) ); // eslint-disable-line max-len\n\t\t\t\tscale = ax;\n\t\t\t} else {\n\t\t\t\tv = float64ToFloat32( ax/scale );\n\t\t\t\tssq = float64ToFloat32( ssq + float64ToFloat32( v*v ) );\n\t\t\t}\n\t\t}\n\t}\n\treturn float64ToFloat32( scale * sqrtf( ssq ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = snrm2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sqrtf = require( '@stdlib/math-base-special-sqrtf' );\nvar absf = require( '@stdlib/math-base-special-absf' );\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// MAIN //\n\n/**\n* Computes the L2-norm of a single-precision floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} L2-norm\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var z = snrm2( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snrm2( N, x, stride, offset ) {\n\tvar scale;\n\tvar ssq;\n\tvar ax;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 ) {\n\t\treturn absf( x[ offset ] );\n\t}\n\tix = offset;\n\tscale = 0.0;\n\tssq = 1.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( x[ ix ] !== 0.0 ) {\n\t\t\tax = absf( x[ ix ] );\n\t\t\tif ( scale < ax ) {\n\t\t\t\tv = float64ToFloat32( scale/ax );\n\t\t\t\tssq = float64ToFloat32( 1.0 + float64ToFloat32( ssq * float64ToFloat32( v*v ) ) ); // eslint-disable-line max-len\n\t\t\t\tscale = ax;\n\t\t\t} else {\n\t\t\t\tv = float64ToFloat32( ax/scale );\n\t\t\t\tssq = float64ToFloat32( ssq + float64ToFloat32( v*v ) );\n\t\t\t}\n\t\t}\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( scale * sqrtf( ssq ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = snrm2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar snrm2 = require( './snrm2.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( snrm2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = snrm2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the L2-norm of a single-precision floating-point vector.\n*\n* @module @stdlib/blas-base-snrm2\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var snrm2 = require( '@stdlib/blas-base-snrm2' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var z = snrm2( x.length, x, 1 );\n* // returns 3.0\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var snrm2 = require( '@stdlib/blas-base-snrm2' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var z = snrm2.ndarray( 4, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar snrm2;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tsnrm2 = main;\n} else {\n\tsnrm2 = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = snrm2;\n\n// exports: { \"ndarray\": \"snrm2.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,EAAO,QAAS,gCAAiC,EACjDC,EAAmB,QAAS,wCAAyC,EAqBzE,SAASC,EAAOC,EAAGC,EAAGC,EAAS,CAC9B,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKP,GAAK,GAAKE,GAAU,EACxB,MAAO,GAER,GAAKF,IAAM,EACV,OAAOH,EAAMI,EAAG,CAAE,CAAE,EAKrB,IAHAE,EAAQ,EACRC,EAAM,EACNJ,GAAKE,EACCK,EAAI,EAAGA,EAAIP,EAAGO,GAAKL,EACnBD,EAAGM,CAAE,IAAM,IACfF,EAAKR,EAAMI,EAAGM,CAAE,CAAE,EACbJ,EAAQE,GACZC,EAAIR,EAAkBK,EAAME,CAAG,EAC/BD,EAAMN,EAAkB,EAAMA,EAAkBM,EAAMN,EAAkBQ,EAAEA,CAAE,CAAE,CAAE,EAChFH,EAAQE,IAERC,EAAIR,EAAkBO,EAAGF,CAAM,EAC/BC,EAAMN,EAAkBM,EAAMN,EAAkBQ,EAAEA,CAAE,CAAE,IAIzD,OAAOR,EAAkBK,EAAQP,EAAOQ,CAAI,CAAE,CAC/C,CAKAT,EAAO,QAAUI,IChFjB,IAAAS,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,EAAO,QAAS,gCAAiC,EACjDC,EAAmB,QAAS,wCAAyC,EAsBzE,SAASC,EAAOC,EAAGC,EAAGC,EAAQC,EAAS,CACtC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKT,GAAK,EACT,MAAO,GAER,GAAKA,IAAM,EACV,OAAOH,EAAMI,EAAGE,CAAO,CAAE,EAK1B,IAHAI,EAAKJ,EACLC,EAAQ,EACRC,EAAM,EACAI,EAAI,EAAGA,EAAIT,EAAGS,IACdR,EAAGM,CAAG,IAAM,IAChBD,EAAKT,EAAMI,EAAGM,CAAG,CAAE,EACdH,EAAQE,GACZE,EAAIV,EAAkBM,EAAME,CAAG,EAC/BD,EAAMP,EAAkB,EAAMA,EAAkBO,EAAMP,EAAkBU,EAAEA,CAAE,CAAE,CAAE,EAChFJ,EAAQE,IAERE,EAAIV,EAAkBQ,EAAGF,CAAM,EAC/BC,EAAMP,EAAkBO,EAAMP,EAAkBU,EAAEA,CAAE,CAAE,IAGxDD,GAAML,EAEP,OAAOJ,EAAkBM,EAAQR,EAAOS,CAAI,CAAE,CAC/C,CAKAV,EAAO,QAAUI,ICnFjB,IAAAW,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAQ,IACRC,EAAU,IAKdF,EAAaC,EAAO,UAAWC,CAAQ,EAKvCH,EAAO,QAAUE,ICYjB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAAQD,EAERC,EAAQC,EAMT,OAAO,QAAUD",
  "names": ["require_snrm2", "__commonJSMin", "exports", "module", "sqrtf", "absf", "float64ToFloat32", "snrm2", "N", "x", "stride", "scale", "ssq", "ax", "v", "i", "require_ndarray", "__commonJSMin", "exports", "module", "sqrtf", "absf", "float64ToFloat32", "snrm2", "N", "x", "stride", "offset", "scale", "ssq", "ax", "ix", "v", "i", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "snrm2", "ndarray", "join", "tryRequire", "isError", "main", "snrm2", "tmp"]
}
